// Generated by gen.go. DO NOT EDIT!

package compare

var _ Diff = &comparator{}

// New returns a new comparator.
func New() *comparator { return &comparator{} }

// comparator is use the compare two native Go types. Supported types
// are: string, bool, int32, int64, float32, float64
type comparator struct {
	diffs []string
}

// Diffs return the list of fieldPaths
func (c *comparator) Diffs() []string {
	return c.diffs
}

// Append appends a new fieldPath to the diffs field
func (c *comparator) Append(fieldPaths ...string) {
	c.diffs = append(c.diffs, fieldPaths...)
}

// StringEqualSoft returns true if two string values are equal. Nil pointers
// and zero values are concidered equal. 
func (c *comparator) StringEqualSoft(fieldPath string, v1, v2 *string) bool {
	if v1 == nil {
		if v2 == nil || *v2 == "" {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		if v1 == nil || *v1 == "" {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// StringEqualStrict returns true if two string values are strictly equal. 
// This function will return false if one of the values is empty and the 
// other is a nil pointer.
func (c *comparator) StringEqualStrict(fieldPath string, v1, v2 *string) bool {
	if v1 == nil {
		if v2 == nil {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// BoolEqualSoft returns true if two bool values are equal. Nil pointers
// and zero values are concidered equal. 
func (c *comparator) BoolEqualSoft(fieldPath string, v1, v2 *bool) bool {
	if v1 == nil {
		if v2 == nil || *v2 == false {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		if v1 == nil || *v1 == false {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// BoolEqualStrict returns true if two bool values are strictly equal. 
// This function will return false if one of the values is empty and the 
// other is a nil pointer.
func (c *comparator) BoolEqualStrict(fieldPath string, v1, v2 *bool) bool {
	if v1 == nil {
		if v2 == nil {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// Int32EqualSoft returns true if two int32 values are equal. Nil pointers
// and zero values are concidered equal. 
func (c *comparator) Int32EqualSoft(fieldPath string, v1, v2 *int32) bool {
	if v1 == nil {
		if v2 == nil || *v2 == 0 {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		if v1 == nil || *v1 == 0 {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// Int32EqualStrict returns true if two int32 values are strictly equal. 
// This function will return false if one of the values is empty and the 
// other is a nil pointer.
func (c *comparator) Int32EqualStrict(fieldPath string, v1, v2 *int32) bool {
	if v1 == nil {
		if v2 == nil {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// Int64EqualSoft returns true if two int64 values are equal. Nil pointers
// and zero values are concidered equal. 
func (c *comparator) Int64EqualSoft(fieldPath string, v1, v2 *int64) bool {
	if v1 == nil {
		if v2 == nil || *v2 == 0 {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		if v1 == nil || *v1 == 0 {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// Int64EqualStrict returns true if two int64 values are strictly equal. 
// This function will return false if one of the values is empty and the 
// other is a nil pointer.
func (c *comparator) Int64EqualStrict(fieldPath string, v1, v2 *int64) bool {
	if v1 == nil {
		if v2 == nil {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// Float32EqualSoft returns true if two float32 values are equal. Nil pointers
// and zero values are concidered equal. 
func (c *comparator) Float32EqualSoft(fieldPath string, v1, v2 *float32) bool {
	if v1 == nil {
		if v2 == nil || *v2 == 0 {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		if v1 == nil || *v1 == 0 {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// Float32EqualStrict returns true if two float32 values are strictly equal. 
// This function will return false if one of the values is empty and the 
// other is a nil pointer.
func (c *comparator) Float32EqualStrict(fieldPath string, v1, v2 *float32) bool {
	if v1 == nil {
		if v2 == nil {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// Float64EqualSoft returns true if two float64 values are equal. Nil pointers
// and zero values are concidered equal. 
func (c *comparator) Float64EqualSoft(fieldPath string, v1, v2 *float64) bool {
	if v1 == nil {
		if v2 == nil || *v2 == 0 {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		if v1 == nil || *v1 == 0 {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// Float64EqualStrict returns true if two float64 values are strictly equal. 
// This function will return false if one of the values is empty and the 
// other is a nil pointer.
func (c *comparator) Float64EqualStrict(fieldPath string, v1, v2 *float64) bool {
	if v1 == nil {
		if v2 == nil {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

