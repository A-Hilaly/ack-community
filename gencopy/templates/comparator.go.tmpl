// Generated by gen.go. DO NOT EDIT!

package compare

var _ Diff = &comparator{}

// New returns a new comparator.
func New() *comparator { return &comparator{} }

// comparator is use the compare two native Go types. Supported types
// are: string, bool, int32, int64, float32, float64
type comparator struct {
	diffs []string
}

// Diffs return the list of fieldPaths
func (c *comparator) Diffs() []string {
	return c.diffs
}

// Append appends a new fieldPath to the diffs field
func (c *comparator) Append(fieldPaths ...string) {
	c.diffs = append(c.diffs, fieldPaths...)
}
{{ range $name, $goType := .Types }}
// {{ $goType.NameCamel }}EqualSoft returns true if two {{ $goType.Name }} values are equal. Nil pointers
// and zero values are concidered equal. 
func (c *comparator) {{ $goType.NameCamel }}EqualSoft(fieldPath string, v1, v2 *{{ $goType.Name }}) bool {
	if v1 == nil {
		if v2 == nil || *v2 == {{ $goType.ZeroValue }} {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		if v1 == nil || *v1 == {{ $goType.ZeroValue }} {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}

// {{ $goType.NameCamel }}EqualStrict returns true if two {{ $goType.Name }} values are strictly equal. 
// This function will return false if one of the values is empty and the 
// other is a nil pointer.
func (c *comparator) {{ $goType.NameCamel }}EqualStrict(fieldPath string, v1, v2 *{{ $goType.Name }}) bool {
	if v1 == nil {
		if v2 == nil {
			return true
		}
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if v2 == nil {
		c.diffs = append(c.diffs, fieldPath)
		return false
	}
	if *v1 == *v2 {
		return true
	}
	c.diffs = append(c.diffs, fieldPath)
	return false
}
{{ end }}
